
% crear una ventana de visualizacion con 5 canales de entrada, una frecuencia de muestreo 
% de 256 Hz y una longitud de búfer de 10 segundos (2560 muestras por canal)
scope_handle = dsp.TimeScope(5,256, 'BufferLength', 2560,...
    'YLimits', [-5 5], 'TimeSpan', 10, 'LayoutDimensions', [5,1],...
    'ReduceUpdates',true, 'YLabel','Amplitude [uV]');
% cambiar al objeto del segundo eje para cambiar el límite y la etiqueta
set(scope_handle, 'ActiveDisplay',5, 'YLimits', [-5 5], 'YLabel','Amplitude [µV]');
drawnow
%%
% llamar la funcion gtecDeviceInterface 
gds_interface = gtecDeviceInterface();
%%
% Establezcer la IP y los puertos para el host y el cliente. 
% Para un ordenador local, se debe configurar los siguientes parámetros
gds_interface.IPAddressHost = '127.0.0.1'; %Define la dirección IP del servidor al que está conectado el dispositivo g.tec
gds_interface.IPAddressLocal = '127.0.0.1'; %Define la dirección IP del ordenador local 
gds_interface.LocalPort = 50224; %puerto de la conexion local
gds_interface.HostPort = 50223;%puerto de la conexion del host
%%
% Buscar dispositivos gtec conectados
connected_devices = gds_interface.GetConnectedDevices();

%% crear array de los dispositivos g.USBamp conectados
gusbamp_configs(1,1:2) = gUSBampDeviceConfiguration(); %Crea una unica matriz con dos dispositivos, los cuales van a ser ocupados por ambos dispositivos
gusbamp_configs(1,1).Name = connected_devices(1,1).Name; % master. Equipo 1, arroja el nombre y ocupa la posición (1,1)
gusbamp_configs(1,2).Name = connected_devices(1,2).Name;% esclavo. Equipo 2, arroja el nombre y ocupa la posición (1,2)
%% la funcion gds_interface.DeviceConfigurations asumne las configuraciones anteriores
gds_interface.DeviceConfigurations = gusbamp_configs;
%% obtener los canales disponibles
available_channels_master = gds_interface.GetAvailableChannels(connected_devices(1,1).Name); % canales disponibles equipo 1 y lo guarda en la variable available_channels_master
available_channels_slave = gds_interface.GetAvailableChannels(connected_devices(1,2).Name);% canales disponibles equipo 2 y lo guarda en la variable available_channels_slave
%% Filtros disponibles
available_filters = gds_interface.GetAvailableFilters((connected_devices(1,1).Name)); %Filtros disponibles almacenados en la variable available_filters
%% Configuración de canales y parametros de grabacion

% i=numero de equipos conectados al pc (en este caso 2)
% j= numero de canales de cada equipo (16 canales por equipo)

for i=1:size(gusbamp_configs,2)% iteracion sobre un rango de valores de i desde 1 hasta el tamaño de la segunda dimensión de la matriz gusbamp_configs
    gusbamp_configs(1,i).SamplingRate = 256; %Frecuencia de muestreo
    gusbamp_configs(1,i).NumberOfScans = 8;%Numero de scaneos
    gusbamp_configs(1,i).CommonGround = true(1,4); %tierra comun para los 16 electrodos. 
    gusbamp_configs(1,i).CommonReference = true(1,4);%referencia comun para los 16 electrodos. 
%     gusbamp_configs(1,i).ShortCutEnabled = false; 
%     gusbamp_configs(1,i).CounterEnabled = false;
%     gusbamp_configs(1,i).TriggerEnabled = false;

    for j=1:size(gusbamp_configs(1,i).Channels,2)   %bucle para los 16 canales del equipo 1+los 16 canales del equipo 2
        if (available_channels_master(1,j)) %condicion para verificar si existen canales disponibles 
            gusbamp_configs(1,i).Channels(1,j).Available = true; %se empieza a leer los canales desde 1 hasta j
            gusbamp_configs(1,i).Channels(1,j).Acquire = true;%se empiezan a adquiri las muestras de los canales 1 hasta j
    
            gusbamp_configs(1,i).Channels(1,j).BandpassFilterIndex = -1;%con -1 no se aplica filtro bandpass
            gusbamp_configs(1,i).Channels(1,j).NotchFilterIndex = -1;%con -1 no se aplica filtro notch
%             % do not use a bipolar channel
%             gusbamp_configs(1,i).Channels(1,j).BipolarChannel = 0;
        end
    end
end
%% Funciones necesarias de adquisicion  
% Aplicar la configuración a la interfaz GDS
gds_interface.DeviceConfigurations = gusbamp_configs;
gds_interface.SetConfiguration();
%% Iniciar la adquisición de datos
gds_interface.StartDataAcquisition(); %Funcion que permite adquirir las muestras
%%
%% La grabacion va a continuar por tiempo indefinido. Para deternerla se ha creado un boton STOP
%% 
stop_button_fig = figure;
set(stop_button_fig, 'KeyPressFcn', @keypress_callback);
uicontrol(stop_button_fig, 'Style', 'pushbutton', 'String', 'Stop', 'Position', [20, 20, 60, 20], 'Callback', @stop_callback);
%%

global stop_flag; %Esta variable se va a utilizar para detener el proceso de adquisicion de datos cuando se presiona el boton
stop_flag = false;

%% VARIABLE DE GRABACION
recorded_data = []; %se crea una matriz vacia recorded_data
samples_acquired = 0; %contador de muestras con valor inicial 0
  
    while ~stop_flag && isvalid(scope_handle)%la grabacion se va a realizar mientras stop_flag=true (boton presionado)
        %o hasta la ventana de visualizacion sea invalida (error de lectura, o cerrar la ventana de visualizacion)
        try
            [scans_received, data] = gds_interface.GetData(8);%funcion para adquirir los scaneos 
        catch ME
            disp(ME.message);
            break; %se detiene la grabacion en caso de un error de adquisicion
        end

        % las variables recorded_data y samples_acquired se van
        % actualizando a valores de adquisicion
        recorded_data = [recorded_data; data];
        samples_acquired = samples_acquired + scans_received;
        
        %% Visualizar proceso de grabacion para canales 1-5-9-13-17
        step(scope_handle, data(:,1),data(:,5) ,data(:,9)  ,data(:,13),data(:,17));
%         samples_acquired = samples_acquired + scans_received;
        drawnow; % Actualizar la ventana de visualizacion
    end



%% Funcion para detener la adquisicion
gds_interface.StopDataAcquisition();
%%
recorded_data = transpose(recorded_data);    

%% Limpiar interfaz gds para una futura grabacion

delete(gds_interface)
clear gds_interface gusbamp_config scope_handle;

%% APLICACION DE FILTRO Y PRESENTACION DE DATOS 


ch=[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16]; %canales a filtrar

a=recorded_data(ch,:); %variable donde se almacenan los canales 1-16
b=double(a); % ): La matriz a se convierte a tipo de datos double y se almacena en la matriz b, necesario para operaciones de filtrado que requieren datos de tipo double.

%% DISENO DEL FILTRO
bpFilt = designfilt('bandpassiir','FilterOrder',14, ...
'HalfPowerFrequency1',0.5,'HalfPowerFrequency2',45, ...
'SampleRate',256); 

c=(filtfilt(bpFilt,b'));
figure
e1=subplot(2,1,1);
plot(a')
e2=subplot(2,1,2);
plot(c)

linkaxes([e1 e2],'x')
ylim([-500 800])



close(stop_button_fig);  % Close the stop_button_fig
% Callback function for the stop button
function stop_callback(~, ~)
    global stop_flag;
    stop_flag = true;
end


